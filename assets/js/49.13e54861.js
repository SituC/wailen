(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{336:function(t,e,i){"use strict";i.r(e);var l=i(14),n=Object(l.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("React Fiber 使用链表来表示组件树的结构，而不是使用数组，这是因为链表在执行增删操作时更加高效，特别是在大型组件树的情况下。")]),t._v(" "),e("p",[t._v("以下是链表相对于数组的优势：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("插入和删除效率高：链表的插入和删除操作时间复杂度为 O(1)，而数组的插入和删除操作时间复杂度为 O(n)。在React Fiber 中，由于组件树可能动态地增长、收缩和重排，使用链表可以更高效地执行这些操作。")])]),t._v(" "),e("li",[e("p",[t._v("内存动态分配：链表的内存分配是动态的，可以根据需要进行扩展或收缩，而数组需要一块连续的内存空间，如果空间不足则需要重新分配内存并复制数据，造成额外的开销。")])]),t._v(" "),e("li",[e("p",[t._v("无需提前分配空间：链表不需要事先知道存储的元素数量，而数组需要在初始化时分配一定大小的内存空间，可能导致内存浪费或者需要重新分配空间。")])]),t._v(" "),e("li",[e("p",[t._v("支持任意长度的组件树：链表可以支持任意长度的组件树，而数组需要提前确定一个最大长度，可能会受到数组大小的限制。")])])]),t._v(" "),e("p",[t._v("React Fiber 使用链表来表示组件树的结构，因为链表在执行动态增删操作时效率更高，能够更好地满足 React 应用程序中动态变化的需求。链表的动态性和灵活性使得 React Fiber 能够更高效地管理组件树，并且适用于各种复杂的场景。")])])}),[],!1,null,null,null);e.default=n.exports}}]);