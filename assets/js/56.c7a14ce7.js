(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{344:function(t,e,a){"use strict";a.r(e);var s=a(14),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结：")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("new Vue")]),t._v(" 执行 "),e("code",[t._v("init")]),t._v(" 函数 初始化生命周期和一些钩子，比如methods，props，methods，data，computed，watch。并且通过"),e("code",[t._v("Object.defineProperty")]),t._v("设置setter和getter实现"),e("code",[t._v("响应式")]),t._v("和进行"),e("code",[t._v("依赖收集")]),t._v("。\n初始化之后就"),e("code",[t._v("$mount")]),t._v("挂在组件，")]),t._v(" "),e("li",[t._v("然后进行编译，主要是生成render function，"),e("code",[t._v("编译")]),t._v("通过三个步骤，先是通过正则解析template的节点和样式信息，形成AST。然后标记静态节点减少比较过程，优化patch过程。最后就是将AST转换成render function渲染函数.当render function被渲染的时候，因为会读取所需对象的值，所以会出发getter函数进行依赖收集，依赖收集的目的是将观察者watcher对象存放到当前闭包中的订阅者Dep的subs中，形成如下关系")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("\n"),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("object")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" dep"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    watcher1\n    watcher2\n    watcher3\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("在修改对象的值的时候，会触发对应的setter，setter通过之前的依赖收集得到Dep中的每一个Watcher，告诉他们自己的值变了，需要重新渲染视图。然后watcher就会开始调用patch方法和update来更新视图。")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("render function会被转化成"),e("code",[t._v("VNode节点")]),t._v("。虚拟节点就是一颗js对象树，用对象属性来描述节点。所以让js有了跨平台的能力。最后新旧vnode节点会通过patch进行diff算法比较，找出差异，然后对dom进行修改。")])]),t._v(" "),e("h1",{attrs:{id:"vue-实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-实例"}},[t._v("#")]),t._v(" Vue 实例")]),t._v(" "),e("p",[t._v("每个 Vue 应用都是通过用 Vue 函数创建一个新的 Vue 实例开始的：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" vm "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 选项")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("复制代码一个 Vue 应用由一个通过 new Vue 创建的根 Vue 实例，以及可选的嵌套的、可复用的组件树组成。当一个 Vue 实例被创建时，它将 data 对象中的所有的属性加入到 Vue 的响应式系统中。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。当这些数据改变时，视图会进行重渲染。")]),t._v(" "),e("h1",{attrs:{id:"初始化及挂载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化及挂载"}},[t._v("#")]),t._v(" 初始化及挂载")]),t._v(" "),e("p",[t._v("在 new Vue() 之后。 Vue 会调用 _init 函数进行初始化，也就是这里的 init 过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过 Object.defineProperty 设置 setter 与 getter 函数，用来实现「响应式」以及「依赖收集」。\n")]),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/6/25/16b8f3a55dd6dde2~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image"}})]),e("p"),t._v(" "),e("p",[t._v("初始化之后调用 $mount 会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「编译」步骤。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/6/25/16b8f3aaaa339102~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image"}})]),t._v(" "),e("h1",{attrs:{id:"mount挂载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mount挂载"}},[t._v("#")]),t._v(" mount挂载")]),t._v(" "),e("p",[t._v("vue也可以使用render函数，render函数的参数是createElement(h),createElement有三个参数，分别是标签、attrs属性对象、内容数组，这样写反人性，所有日常还是使用template。")]),t._v(" "),e("h1",{attrs:{id:"编译"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译"}},[t._v("#")]),t._v(" 编译")]),t._v(" "),e("p",[t._v("compile编译可以分成 parse、optimize 与 generate 三个阶段，最终需要得到 render function。")]),t._v(" "),e("ul",[e("li",[t._v("parse 会用正则等方式解析 template 模板中的指令、class、style等数据，形成抽象语法树AST（动态生成语法树）")]),t._v(" "),e("li",[t._v("optimize 的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当 update 更新界面时，会有一个 patch 的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了 patch 的性能。")]),t._v(" "),e("li",[t._v("generate 是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。")])]),t._v(" "),e("p",[t._v("在经历过 parse、optimize 与 generate 这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了")]),t._v(" "),e("h1",{attrs:{id:"响应式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#响应式"}},[t._v("#")]),t._v(" 响应式")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/6/25/16b8f3dc338d8bbe~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image"}})]),t._v(" "),e("p",[t._v("在 init 的时候通过 Object.defineProperty 进行了绑定，它使得当被设置的对象被读取的时候会执行 getter 函数，而在当被赋值的时候会执行 setter 函数。")]),t._v(" "),e("p",[t._v("当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发 getter 函数进行「依赖收集」，「依赖收集」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/6/25/16b8f3e30f195a8f~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image"}})]),t._v(" "),e("p",[t._v("在修改对象的值的时候，会触发对应的 setter， setter 通知之前 「依赖收集」 得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用 update 来更新视图，当然这中间还有一个 patch 的过程以及使用队列来异步更新的策略")]),t._v(" "),e("h1",{attrs:{id:"virtual-dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#virtual-dom"}},[t._v("#")]),t._v(" Virtual DOM")]),t._v(" "),e("p",[t._v("render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("tag")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*说明这是一个div标签*/")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("children")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("                 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*存放该标签的子节点*/")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("tag")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("           "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*说明这是一个a标签*/")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("text")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click me'")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*标签的内容*/")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("渲染后可以得到")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("click me"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("h1",{attrs:{id:"更新视图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新视图"}},[t._v("#")]),t._v(" 更新视图")]),t._v(" "),e("p",[t._v("修改一个对象值的时候，会通过 "),e("code",[t._v("setter -> Watcher -> update")]),t._v(" 的流程来修改对应的视图，那么最终是如何更新视图的呢？")]),t._v(" "),e("p",[t._v("当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用 innerHTML 直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「浪费」。")]),t._v(" "),e("p",[t._v("那么我们为什么不能只修改那些 「改变了的地方」 呢？这个时候就要介绍我们的「patch」了。我们会将新的 VNode 与旧的 VNode 一起传入 patch 进行比较，经过 diff 算法得出它们的 「差异」 。最后我们只需要将这些 「差异」 的对应 DOM 进行修改即可。")]),t._v(" "),e("p",[t._v("事实上。vue2并没有实现节点上vdom更新，在vue3上才有望实现（2019vueconf大会尤雨奚）")]),t._v(" "),e("p",[t._v("new vue 初始化-mounted挂载-compile-render-createElement虚拟节点-(返回普通vnode或者createcomponents创建一个组件vnode，这个节点是vue的一个子类,总之返回的都是vnode，这个vnode可能有若干个子节点，它们也是vnode类型，这里就可以描述为vnode-tree->update->patch(createElm作用是，如果vnode是普通的节点就创建真实的dom节点插入父元素下，如果节点vnode 的tag标明是组件，根据vnode创建一个组件节点，并且执行相应的钩子函数，这个过程就是遍历所有的子vnode,如果它的子节点vnode又是个组件，重复刚才的过程render-创建虚拟节点，这个过程是一个"),e("code",[t._v("深度优先遍历")]),t._v("的算法。")])])}),[],!1,null,null,null);e.default=r.exports}}]);