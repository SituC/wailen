(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{380:function(e,t,o){"use strict";o.r(t);var r=o(14),u=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("在 Vue3 中，Vue 之所以能够监听数组的每个元素，是因为 Vue3 采用了 Proxy API 来实现响应式数据。")]),e._v(" "),t("p",[e._v("Proxy 是 ES6 引入的一个新特性，它可以拦截并重定义对象的基本操作，比如读取、赋值、枚举等。Vue3 利用 Proxy 对数组进行监听，当数组发生变化时，会触发 Proxy 的 set 拦截器，从而通知 Vue3 进行更新。")]),e._v(" "),t("p",[e._v("使用 Proxy 监听数组的每个元素相比 Vue2 的做法，有以下优点：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("更加灵活：使用 Proxy 可以拦截对象的所有操作，包括读取、赋值、枚举等，相比 Vue2 只能监听对象属性的 setter 更加灵活。")])]),e._v(" "),t("li",[t("p",[e._v("更加高效：使用 Proxy 监听数组的每个元素，可以避免对整个数组进行遍历，只需要对发生变化的元素进行更新，从而提高性能。")])])]),e._v(" "),t("p",[e._v("因此，在 Vue3 中，我们可以使用 Reactive API 创建一个响应式数组，并对数组的每个元素进行监听，从而实现对数组的响应式更新。")])])}),[],!1,null,null,null);t.default=u.exports}}]);